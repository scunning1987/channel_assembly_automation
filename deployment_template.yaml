#### Title : MediaTailor Channel Assembly Automation Pipelinee
#### Author : Scott Cunningham
####
####

## Parameters - User Input
Parameters:

  ContentPortalAPIURL:
    Description: Enter the API URL for Content Portal
    Type: String
    Default: https://...

## Resources
Resources:
  #################
  ## S3
  #################

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  #################
  ## IAM & Permissions
  #################
  ## IAM Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  ## IAM Policy
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LambdaRole
      PolicyName: !Sub ${AWS::StackName}-s3-access
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}/*
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !GetAtt ContentDatabase.Arn
              - !GetAtt APIRequestDatabase.Arn
          - Effect: Allow
            Action:
              - mediapackage-vod:CreateAsset
              - mediapackage-vod:DeleteAsset
              - mediapackage-vod:DescribeAsset
              - mediapackage-vod:ListAssets
            Resource:
              - !Sub arn:aws:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - mediapackage-vod:ListAssets
            Resource:
              - !Sub arn:aws:mediapackage-vod:${AWS::Region}:${AWS::AccountId}:assets/*
          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:PassRole
            Resource:
              - !GetAtt EMPSourceRole.Arn

  EMPSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - mediapackage.amazonaws.com
            Action:
              - sts:AssumeRole

    DependsOn: S3Bucket

  StepFunctionServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole

  StepFunctionServiceRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy that provides ability to services to call state machines and lambdas
      Roles:
        - !Ref StepFunctionServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: Allow
            Action:
              - states:*
            Resource:
              - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*

  StepFunctionStartExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-${AWS::Region}-start-exec-sfn-role-policy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-CAAutomation-StepFunction

  MediaPackagePassRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-emp-pass-role-policy"
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:PassRole
            Resource:
              - !GetAtt EMPSourceRole.Arn

  APIGatewayCWatchLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  LambdaInvokePermissionAPI:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CAAutomationAPIHandler.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"
    DependsOn:
      - CAAutomationAPIHandler

  #####
  # DynamoDB
  #####
  ContentDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub CA-Content-DB-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: house_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: house_id
          AttributeType: S

  APIRequestDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub CA-APIReq-DB-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: request_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: request_id
          AttributeType: S

  #################
  ## Custom Resource
  #################

  FileMover:
    Type: Custom::LambdaInvokerToMoveFiles
    Properties:
      ServiceToken: !GetAtt FileCopier.Arn
      Region: !Ref 'AWS::Region'
    DependsOn:
      - S3Bucket
      - LambdaRole

  #################
  ## Lambda
  #################

  CAAutomationAPIHandler:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to handle API requests for LIST updates
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Layers:
        - !Ref LambdaLayerXMLtoDict
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_api_handler
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover
      - LambdaLayerXMLtoDict

  CAAutomationCheckClipStatus:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to check the status of a clip through video supply chain
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_check_clip_status
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover
      - LambdaLayerXMLtoDict

  CAAutomationCheckDatabase:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to check if clip is already in database
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_check_database
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationCreateChannel:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to create Channel Assembly channel, or update existing
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_create_channel
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationCreatePrograms:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to create programs for a channel assembly channel
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_create_programs
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationCreateSources:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to create sources for MediaTailor channel assembly
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_create_sources
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationListTranslator:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to translate broadcast automation list to mediatailor compatible playlist json
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_list_translator
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationStartChannel:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to start channel after creation
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_start_channel
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationStatusCheck:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to start channel after creation
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_status_check
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationSubmitPackage:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to start channel after creation
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_submit_package
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover

  CAAutomationSubmitTranscode:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to start channel after creation
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 10240
      Layers:
        - !Ref LambdaLayerXMLtoDict
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.ca_automation_submit_transcode
      Environment:
        Variables:
          CONTENTDB: !Ref ContentDatabase
          APIREQDB: !Ref APIRequestDatabase
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - FileCopier
      - FileMover


  FileCopier:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function to copy solution files to destination bucket
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Handler: index.lambda_handler
      Timeout: 35
      MemorySize: 10240
      Code:
        ZipFile: |
          '''
          Copyright (c) 2021 Scott Cunningham

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.

          Summary: This script is a custom resource to place the HTML pages and Lambda code into the destination bucket.

          Original Author: Scott Cunningham
          '''

          import json
          import logging
          import boto3
          import os
          import urllib3
          from urllib.parse import urlparse
          from zipfile import ZipFile
          import cfnresponse

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          MANIFESTMODIFY="True"

          version = 2

          def lambda_handler(event, context):

              ## Log the incoming event
              LOGGER.info("Event : %s " % (event))

              ## Create Response Data Dictionary for the CloudFormationn response
              responseData = dict()

              ## Initialize S3 boto3 client
              s3 = boto3.client('s3')

              # Create urllib3 pool manager
              http = urllib3.PoolManager()

              # Manifest File containning URL's on github
              cloudformation_manifest = "https://raw.githubusercontent.com/scunning1987/channel_assembly_automation/main/manifest.txt"

              # Pull global env variable to variable
              bucket = os.environ['BUCKET']

              # Get the manifest from GitHub
              get_response = http.request('GET', cloudformation_manifest)

              if get_response.status != 200:
                  # Exit the script with errors
                  responseData['Status'] = "Unable to get file from location : %s " % (file)
                  cfnresponse.send(event, context, "FAILED",responseData)
                  raise Exception("Unable to get file from location : %s " % (file))
              else:
                  # Continue and upload to S3
                  manifest_list = get_response.data.decode("utf-8").split("\n")

              # remove manifest.txt header line
              manifest_list.pop(0)

              LOGGER.info("Files to transfer to S3: %s " % (manifest_list))

              for file in manifest_list:

                  # Get the file from GitHub
                  if "http" in file:
                      get_response = http.request('GET', file)

                  if get_response.status != 200:
                      # Exit the script with errors
                      responseData['Status'] = "Unable to get file from location : %s " % (file)
                      cfnresponse.send(event, context, "FAILED",responseData)
                      raise Exception("Unable to get file from location : %s " % (file))
                  elif "http" in file:

                      # Continue and upload to S3

                      # url string to urllib object
                      file_url_formatted = urlparse(file)
                      file_url_path = file_url_formatted.path

                      # get path after github repo owner name - use this as the path to write to s3
                      path = '/'.join(file_url_path.split("/")[2:]).rsplit("/",1)[0]
                      s3_data = get_response.data


                      file_name = file.rsplit("/",1)[1]
                      file_base_name = os.path.splitext(file_name)[0]
                      s3_key = "%s/%s" % (path,file_name)

                      content_type = ""
                      if ".html" in file_name:
                          content_type = "text/html"
                      elif ".css" in file_name:
                          content_type = "text/css"
                      elif ".js" in file_name:
                          content_type = "text/javascript"
                      elif ".json" in file_name:
                          content_type = "application/json"
                      elif ".zip" in file_name: # this is the zip
                          content_type = "application/zip"
                          s3_key = path + file_name
                      elif ".py" in file_name:
                          # write python file to zip,
                          python_file = open("/tmp/"+file_name,"w")
                          python_file.write(get_response.data.decode("utf-8"))
                          python_file.close()

                          # Zip the file
                          LOGGER.info("Zipping the file : %s " % ("/tmp/"+file_name))
                          zipObj = ZipFile('/tmp/'+file_name.replace(".py",".zip"), 'w')
                          # Add file to the zip
                          zipObj.write('/tmp/'+file_name,"index.py")
                          # close the Zip File
                          zipObj.close()
                          LOGGER.info("Finished zipping file")

                          content_type = "application/zip"
                          s3_data = open("/tmp/"+file_name.replace(".py",".zip"), 'rb')
                          s3_key = s3_key.replace(".py",".zip")

                      # "RequestType": "Create"
                      if event['RequestType'] == "Create" or event['RequestType'] == "Update":
                          # Upload to S3
                          LOGGER.info("Now uploading %s to S3, Bucket: %s , path: %s" % (file_name,bucket,s3_key))
                          try:
                              s3_response = s3.put_object(Body=s3_data, Bucket=bucket, Key=s3_key,ContentType=content_type, CacheControl='no-cache')
                              LOGGER.info("Uploaded %s to S3, got response : %s " % (file_name,s3_response) )
                              responseData[file_base_name] = s3_key
                          except Exception as e:
                              LOGGER.error("Unable to upload %s to S3, got exception: %s" % (file_name,e))
                              responseData['Status'] = "Unable to upload %s to S3, got exception: %s" % (file_name,e)
                              cfnresponse.send(event, context, "FAILED",responseData)
                              raise Exception("Unable to upload %s to S3, got exception: %s" % (file_name,e))

                      else: # DELETE
                          try:
                              s3_response = s3.delete_object(Bucket=bucket,Key=s3_key)
                              LOGGER.info("Deleted %s from S3, got response : %s " % (file_name,s3_response) )
                          except Exception as e:
                              LOGGER.error("Unable to delete %s from S3, got exception: %s" % (file_name,e))
                              responseData['Status'] = "Unable to delete %s from S3, got exception: %s" % (file_name,e)
                              cfnresponse.send(event, context, "FAILED",responseData)
                  else:
                      LOGGER.info("Got line in manifest.txt that isn't a URL: %s " % (file))
              responseData['Status'] = "SUCCESS"
              cfnresponse.send(event, context, "SUCCESS",responseData)
              return responseData

      Environment:
        Variables:
          BUCKET: !Ref S3Bucket
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName
    DependsOn:
      - S3Bucket
      - LambdaRole
      - S3AccessPolicy

  LambdaLayerXMLtoDict:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Description: Lambda Layer containing Python library XMLtoDict - XML Parser
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: !GetAtt FileMover.xmltodict
      LayerName: xmltodictlibrary
      LicenseInfo: https://raw.githubusercontent.com/martinblech/xmltodict/master/LICENSE

  #################################
  # Step Functions
  #################################

  CAAutomationSfn:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn:
      - CAAutomationAPIHandler
      - CAAutomationCheckDatabase
      - CAAutomationCheckClipStatus
      - CAAutomationCreateChannel
      - CAAutomationCreatePrograms
      - CAAutomationCreateSources
      - CAAutomationListTranslator
      - CAAutomationStartChannel
      - CAAutomationStatusCheck
      - CAAutomationSubmitTranscode
      - CAAutomationSubmitPackage
    Properties:
      StateMachineName: !Sub ${AWS::StackName}-CAAutomation-StepFunction
      RoleArn: !GetAtt StepFunctionServiceRole.Arn
      DefinitionString: !Sub
        |-

        {
          "Comment": "Broadcast automation to EMT CA translator and video supply chain",
          "StartAt": "List Parser",
          "States": {
            "List Parser": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "arn:aws:lambda:us-west-2:301520684698:function:ca_api_handler:$LATEST"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Parallel"
            },
            "Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "List Translator",
                  "States": {
                    "List Translator": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${CAAutomationAPIHandler.Arn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "CA Create Channel"
                    },
                    "CA Create Channel": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${CAAutomationListTranslator.Arn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Wait for Video Pipeline"
                    },
                    "Wait for Video Pipeline": {
                      "Type": "Wait",
                      "Seconds": 120,
                      "Next": "Video Pipeline Check"
                    },
                    "Video Pipeline Check": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${CAAutomationCheckClipStatus.Arn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Video Pipeline Complete Check"
                    },
                    "Video Pipeline Complete Check": {
                      "Type": "Choice",
                      "Choices": [
                        {
                          "Not": {
                            "Variable": "$.workflow_state.all_complete",
                            "BooleanEquals": true
                          },
                          "Next": "CA Create Programs"
                        }
                      ],
                      "Default": "Wait for Video Pipeline"
                    },
                    "CA Create Programs": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${CAAutomationCreatePrograms.Arn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Start Channel"
                    },
                    "Start Channel": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${CAAutomationStartChannel.Arn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Map",
                  "States": {
                    "Map": {
                      "Type": "Map",
                      "Iterator": {
                        "StartAt": "DB Check",
                        "States": {
                          "DB Check": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "Payload.$": "$",
                              "FunctionName": "${CAAutomationCheckDatabase.Arn}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "Is Video New Or Not"
                          },
                          "Is Video New Or Not": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Not": {
                                  "Variable": "$.DBCheck",
                                  "StringMatches": "Exists"
                                },
                                "Next": "Transcode Submit"
                              }
                            ],
                            "Default": "Check Status"
                          },
                          "Transcode Submit": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "Payload.$": "$",
                              "FunctionName": "${CAAutomationSubmitTranscode.Arn}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "Wait for Transcode"
                          },
                          "Wait for Transcode": {
                            "Type": "Wait",
                            "Seconds": 120,
                            "Next": "Transcode Status Check"
                          },
                          "Transcode Status Check": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "Payload.$": "$",
                              "FunctionName": "${CAAutomationStatusCheck.Arn}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "Transcode Complete Check"
                          },
                          "Transcode Complete Check": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Not": {
                                  "Variable": "$.workflow_state.transcode_complete",
                                  "BooleanEquals": true
                                },
                                "Next": "JITP Submit"
                              }
                            ],
                            "Default": "Wait for Transcode"
                          },
                          "JITP Submit": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "Payload.$": "$",
                              "FunctionName": "${CAAutomationSubmitPackage.Arn}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "Wait for Package"
                          },
                          "Wait for Package": {
                            "Type": "Wait",
                            "Seconds": 120,
                            "Next": "Package Status Check"
                          },
                          "Package Status Check": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "Payload.$": "$",
                              "FunctionName": "${CAAutomationStatusCheck.Arn}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "Package Complete Check"
                          },
                          "Package Complete Check": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Not": {
                                  "Variable": "$.workflow_state.package_complete",
                                  "BooleanEquals": true
                                },
                                "Next": "Create SA Sources"
                              }
                            ],
                            "Default": "Wait for Package"
                          },
                          "Create SA Sources": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "Payload.$": "$",
                              "FunctionName": "${CAAutomationCreateSources.Arn}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "End": true
                          },
                          "Check Status": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$.Payload",
                            "Parameters": {
                              "Payload.$": "$",
                              "FunctionName": "${CAAutomationStatusCheck.Arn}"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "End": true
                          }
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "Next": "Pass"
            },
            "Pass": {
              "Type": "Pass",
              "End": true
            }
          }
        }

    #################
    ## API Gateway
    #################

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ChannelAssemblyAutomation
      Description: REST API For POIS Control and data plane activities
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

  ProxyPlusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  ResourceMethodAny:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        Type: AWS_PROXY
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - :lambda:path/2015-03-31/functions/
            - !GetAtt CAAutomationAPIHandler.Arn
            - /invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref EmptyApiModel
      ResourceId: !Ref ProxyPlusResource
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  OptionsForCors:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref ProxyPlusResource
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway

  EmptyApiModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: This is a default empty schema model
      RestApiId: !Ref ApiGateway
      Schema: {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "Empty Schema",
        "type": "object"
      }

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Production Deployment of Api Endpoint
      RestApiId: !Ref ApiGateway
    DependsOn:
      - ApiGateway
      - ResourceMethodAny

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deployment
      RestApiId: !Ref ApiGateway
      StageName: v1
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: '/*'
          LoggingLevel: INFO
          DataTraceEnabled: True
    DependsOn:
      - ApiGateway

  APIGatewayCloudWatchLogsAccess:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt APIGatewayCWatchLoggingRole.Arn


  #################
  ## EventBridge
  #################

  StepFunctionsInitiate:
    Type: AWS::Events::Rule
    Properties:
      Description: Event Bridge to start Step Functions Workflow
      EventPattern: {
        "source": [
            "aws.lambda",
            "lambda.amazonaws.com"
        ],
        "detail-type": [
            "StepFunctions Initialize"
        ]
        }
      Targets:
        - Arn: !Sub >-
            arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-CAAutomation-StepFunction
          RoleArn: !GetAtt StepFunctionStartExecutionRole.Arn
          Id: CAAutomationStepFunctionsInitiate

#################################
# Outputs
#################################

Outputs:
  ListUploadAPI:
    Description: PUT List Updates to this URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/listupload

  ListStatusAPI:
    Description: This is the API to check the status of a list conversion process. the UUID would have been returned to you in the original listupload call
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/liststatus/[uuid]

  ChannelsAPI:
    Description: This is the API to return all FAST channel URLs
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}/channels